#!/usr/bin/python3

# -*- coding: utf-8 -*-
"""
Created on Mon Oct 28 09:15:54 2019

@author: Henry James

Command line tool to search for regex per line and output results
whilst egrep has same functionality this tool will be able to
return regex groups allowing for great flexibility in the CLI.

Command use:
    regex_search.py [regex] [group number (default group 0)]

Examples where groups are useful

# returns the contents of anything matched between the OPERATION= and the ,
cat file | grep RULE:R | regex_search 'OPERATION=(.+?),' 1

# can search for multiples like this
cat file | grep CONDITION | head | regex_search 'GROUPNAME="(.+?)",RELATION=(.+?),' 1,2

"""
##############################################################################
import sys
import re
import argparse
##############################################################################
if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    
    parser.add_argument('regex', help='Select the regex to be searched')
    parser.add_argument('group',
                        nargs='*',
                        default=0,
                        help='Select the regex group returned, default group 0, multiple groups with 1,2,3,5 etc..')
    
    args = parser.parse_args()

    # if no file as input, say if input from unix pipe
    _file = sys.stdin.readlines()
    list_of_config = [line for line in _file]
    
    if args.group:
        regex_group = args.group[0]
    else:
        regex_group = args.group

    if ',' not in str(regex_group):
        re_input_regex = re.compile(r'{}'.format(args.regex))
        return_list = [print(match.group(int(regex_group))) 
                       for line in list_of_config 
                           for match in [re_input_regex.search(line)] 
                               if match]
    
    # if multiple groups selected
    if ',' in str(regex_group):
        regex_group = regex_group.split(',')
        return_dict = {}
        for group in regex_group:
            re_input_regex = re.compile(r'{}'.format(args.regex))
            return_dict[group] = [match.group(int(group)) 
                                 for line in list_of_config 
                                     for match in [re_input_regex.search(line)] 
                                         if match]
        # iterate through the dict and print side by side
        for input_length in range(1, len(return_dict['1'])):
            line = []
            for col in return_dict:
                line_item = return_dict[str(col)][input_length]
                line.append(line_item)
            print(','.join(line))
##############################################################################
